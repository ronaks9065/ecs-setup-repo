Resources:
  
  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: DemoAppLB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        -  Fn::ImportValue: !Sub pubsubnet1id
        -  Fn::ImportValue: !Sub pubsubnet2id
      SecurityGroups:
        - Fn::ImportValue: !Sub ecssgid

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: '80'
      Protocol: HTTP

  ECSALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: ALBListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref ALBListener
      Priority: 1

  ECSTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: bycf
      TargetType: ip
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: MyVPC

  # Create Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: DemoAppCluster

  # Create Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: DemoAppTaskDefinition
      ContainerDefinitions:
        - Name: DemoAppContainer
          Image: httpd
          Essential: 'true'
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80
      NetworkMode: awsvpc
      Memory: '0.5GB'
      Cpu: '0.25 vCPU'
      ExecutionRoleArn: arn:aws:iam::488189875832:role/ecsTaskExecutionRole

  # Create Service
  ECSservice:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: DemoAppService
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: DemoAppContainer
          ContainerPort: '80'
          TargetGroupArn: !Ref ECSTG
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
            SecurityGroups:
              - Fn::ImportValue: !Sub ecssgid
            Subnets:
              -  Fn::ImportValue: !Sub pubsubnet1id
              -  Fn::ImportValue: !Sub pubsubnet2id
            AssignPublicIp: ENABLED
